{
  "version": 3,
  "sources": ["../../../../../Modules/Administration/User/UserPage.ts", "../../../../../Modules/Administration/User/UserGrid.ts", "../../../../../Modules/Administration/UserPermission/UserPermissionDialog.ts", "../../../../../Modules/Administration/User/UserDialog.ts"],
  "sourcesContent": ["import { initFullHeightGridPage } from \"@serenity-is/corelib\"\r\nimport { UserGrid } from \"./UserGrid\";\r\n\r\n$(function() {\r\n    initFullHeightGridPage(new UserGrid($('#GridDiv')).element);\r\n});", "import { RoleRow, UserColumns, UserRow, UserService } from \"@/ServerTypes/Administration\";\r\nimport { Decorators, EntityGrid } from \"@serenity-is/corelib\";\r\nimport { Lookup, resolveUrl, tryFirst, confirmDialog } from \"@serenity-is/corelib\";\r\nimport { UserDialog } from \"./UserDialog\";\r\nimport { AdminRefreshUser } from '../../Administration/User/Authentication/AuthUtils';\r\n\r\n@Decorators.registerClass()\r\nexport class UserGrid extends EntityGrid<UserRow, any> {\r\n    protected getColumnsKey() { return UserColumns.columnsKey; }\r\n    protected getDialogType() { return UserDialog; }\r\n    protected getIdProperty() { return UserRow.idProperty; }\r\n    protected getIsActiveProperty() { return UserRow.isActiveProperty; }\r\n    protected getLocalTextPrefix() { return UserRow.localTextPrefix; }\r\n    protected getService() { return UserService.baseUrl; }\r\n\r\n    constructor(container: JQuery) {\r\n        super(container);\r\n    }\r\n\r\n    protected override getDefaultSortBy() {\r\n        return [UserRow.Fields.Username];\r\n    }\r\n\r\n    protected override createIncludeDeletedButton() {\r\n    }\r\n\r\n    //winauth changes -- please note that your method will be\r\n    // different if you are using StartSharp, you will still want to keep\r\n    // some impersonation code that you don't see here:\r\n    protected override getColumns() {\r\n        let columns = super.getColumns();\r\n        let cols = new UserColumns(columns);\r\n\r\n        // if you are using StartSharp, here is where\r\n        // the impersonation code should be\r\n        /*\r\n        let impersonationToken = cols.ImpersonationToken;\r\n        if (impersonationToken) {\r\n            impersonationToken.format = ctx => {\r\n                if (!ctx.value)\r\n                    return \"\";\r\n\r\n                return `<a target=\"_blank\" href=\"${resolveUrl('~/Account/ImpersonateAs?token=')}${ctx.value}\">`\r\n                    + `<i class=\"fa fa-user-secret text-blue\"></i></a>`;\r\n            }\r\n        }\r\n        */\r\n        var roles = cols.Roles;\r\n        if (roles) {\r\n            var rolesLookup: Lookup<RoleRow>;\r\n            RoleRow.getLookupAsync().then(lookup => {\r\n                rolesLookup = lookup;\r\n                this.slickGrid.invalidate();\r\n            });\r\n\r\n            roles.format = ctx => {\r\n                if (!rolesLookup)\r\n                    return `<i class=\"fa fa-spinner\"></i>`;\r\n\r\n                var roleList = (ctx.value || []).map(x => (rolesLookup.itemById[x] || {}).RoleName || \"\");\r\n                roleList.sort();\r\n                return roleList.join(\", \");\r\n            };\r\n        }\r\n        columns.splice(1, 0, {\r\n            field: 'Refresh User',\r\n            name: '',\r\n            format: ctx => `<a class=\"inline-action recycle-cache text-green\" title=\"refresh user data\">\r\n                    <i class=\"fa fa-recycle\"></i></a>`,\r\n            width: 24,\r\n            minWidth: 24,\r\n            maxWidth: 24\r\n        });\r\n        return columns;\r\n    }\r\n\r\n    // winauth new methods:\r\n    protected onClick(e: JQueryEventObject, row: number, cell: number) {\r\n        super.onClick(e, row, cell);\r\n\r\n        if (e.isDefaultPrevented())\r\n            return;\r\n\r\n        var item = this.itemAt(row);\r\n        var target = $(e.target);\r\n\r\n        if (target.parent().hasClass('inline-action'))\r\n            target = target.parent();\r\n\r\n        if (target.hasClass('inline-action')) {\r\n            e.preventDefault();\r\n            if (target.hasClass('recycle-cache')) {\r\n                this.refreshUserData(item.UserId, item.Username);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected refreshUserData(userId, userName) {\r\n\r\n        if (userName.indexOf(\"\\\\\") > 1) {\r\n            var msg = \"The user's cached site details have been removed. The user's roles have also been re-queried from Windows (you may not see the results until you refresh this screen).\";\r\n            var msg2 = \"\\n\\nIf this user had other roles manually assigned, the additional roles will have been removed and you may need to re-assign some.\";\r\n            var msg3 = \"\\n\\nThe user may need to request a refresh via their Profile page, or log out and back in, to see an updated Dashboard in some cases.\";\r\n\r\n\r\n            confirmDialog(\"PRESERVE existing roles not corresponding\\nto Windows network groups\\nfor \" +\r\n                userName + \" (answer 'Yes') ?\\n\\nAnswering 'No' will REMOVE roles that may have been manually assigned. \" +\r\n                \"\\n\\nUse the Close box to cancel.\", () => AdminRefreshUser(userId, userName, msg + msg3,false) ,\r\n           {\r\n               onNo: () => AdminRefreshUser(userId, userName, msg + msg2 + msg3, true)\r\n            }\r\n              \r\n            )\r\n        }\r\n        else {\r\n            var msg = \"The user's cached site details have been removed.\";\r\n            var msg2 = \"\\n\\nThe user may need to request a refresh via their Profile page, or log out and back in, to see an updated Dashboard in some cases.\";\r\n\r\n            AdminRefreshUser(userId, userName, msg + msg2, false);\r\n\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n", "import { Decorators, TemplatedDialog } from \"@serenity-is/corelib\";\r\nimport { format, getRemoteData, notifySuccess, localText } from \"@serenity-is/corelib\";\r\nimport { UserPermissionService } from \"../\";\r\nimport { PermissionCheckEditor } from \"./PermissionCheckEditor\";\r\n\r\nexport class UserPermissionDialog extends TemplatedDialog<UserPermissionDialogOptions> {\r\n\r\n    private permissions: PermissionCheckEditor;\r\n\r\n    constructor(opt: UserPermissionDialogOptions) {\r\n        super(opt);\r\n\r\n        this.permissions = new PermissionCheckEditor(this.byId('Permissions'), {\r\n            showRevoke: true\r\n        });\r\n\r\n        UserPermissionService.List({\r\n            UserID: this.options.userID\r\n        }, response => {\r\n            this.permissions.value = response.Entities;\r\n        });\r\n\r\n        UserPermissionService.ListRolePermissions({\r\n            UserID: this.options.userID\r\n        }, response => {\r\n            this.permissions.rolePermissions = response.Entities;\r\n        });\r\n\r\n        this.permissions.implicitPermissions = getRemoteData('Administration.ImplicitPermissions');\r\n        this.dialogTitle = format(localText('Site.UserPermissionDialog.DialogTitle'),\r\n            this.options.username);\r\n    }\r\n\r\n    protected getDialogButtons() {\r\n        return [\r\n            {\r\n                text: localText('Dialogs.OkButton'),\r\n                cssClass: 'btn btn-primary',\r\n                click: e => {\r\n                    UserPermissionService.Update({\r\n                        UserID: this.options.userID,\r\n                        Permissions: this.permissions.value\r\n                    }, response => {\r\n                        this.dialogClose();\r\n                        window.setTimeout(() => notifySuccess(localText('Site.UserPermissionDialog.SaveSuccess')), 0);\r\n                    });\r\n                }\r\n            }, {\r\n                text: localText('Dialogs.CancelButton'),\r\n                click: () => this.dialogClose()\r\n            }\r\n        ];\r\n    }\r\n\r\n    protected getTemplate(): string {\r\n        return '<div id=\"~_Permissions\"></div>';\r\n    }\r\n}\r\n\r\nexport interface UserPermissionDialogOptions {\r\n    userID?: number;\r\n    username?: string;\r\n}\r\n", "import { UserForm, UserRow, UserService } from \"../\";\r\nimport { UserPermissionDialog } from \"../UserPermission/UserPermissionDialog\";\r\nimport { Decorators, EditorUtils, EntityDialog, confirmDialog } from \"@serenity-is/corelib\"\r\nimport { format, localText } from \"@serenity-is/corelib\";\r\nimport { Texts } from \"@/ServerTypes/Texts\";\r\nimport { AdminRefreshUser } from '../../Administration/User/Authentication/AuthUtils';\r\n\r\n@Decorators.registerClass()\r\nexport class UserDialog extends EntityDialog<UserRow, any> {\r\n    protected getFormKey() { return UserForm.formKey; }\r\n    protected getIdProperty() { return UserRow.idProperty; }\r\n    protected getIsActiveProperty() { return UserRow.isActiveProperty; }\r\n    protected getLocalTextPrefix() { return UserRow.localTextPrefix; }\r\n    protected getNameProperty() { return UserRow.nameProperty; }\r\n    protected getService() { return UserService.baseUrl; }\r\n\r\n    protected form = new UserForm(this.idPrefix);\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.form.Password.change(() => {\r\n            EditorUtils.setRequired(this.form.PasswordConfirm, this.form.Password.value.length > 0);\r\n        });\r\n\r\n        this.form.Password.addValidationRule(this.uniqueName, e => {\r\n            if (this.form.Password.value.length < 6)\r\n                return format(localText(Texts.Validation.MinRequiredPasswordLength), 6);\r\n        });\r\n\r\n        this.form.PasswordConfirm.addValidationRule(this.uniqueName, e => {\r\n            if (this.form.Password.value != this.form.PasswordConfirm.value)\r\n                return localText(Texts.Validation.PasswordConfirmMismatch);\r\n        });\r\n    }\r\n\r\n    protected getToolbarButtons()\r\n    {\r\n        let buttons = super.getToolbarButtons();\r\n\r\n        buttons.push({\r\n            title: localText(Texts.Site.UserDialog.EditPermissionsButton),\r\n            cssClass: 'edit-permissions-button',\r\n            icon: 'fa-lock text-green',\r\n            onClick: () =>\r\n            {\r\n                new UserPermissionDialog({\r\n                    userID: this.entity.UserId,\r\n                    username: this.entity.Username\r\n                }).dialogOpen();\r\n            }\r\n        });\r\n    \n\n        //winauth additions:\n        buttons.splice(2, 0, {\n            title: \"\",\n            hint: \"Refresh\",\n            icon: 'fa fa-refresh text-blue',\n            cssClass: 'refresh-user-dialog',\n            separator: false,\n            onClick: () => {\n                this.reloadById();\n            }\n        });\n\r\n        buttons.push({\r\n            title: localText('Refresh User Data'),\r\n            icon: 'fa-recycle text-green',\r\n            cssClass: 'refresh-user-button',\r\n            separator: true,\r\n            onClick: () => {\r\n                this.refreshUserData();\n                \r\n            }\r\n        });\r\n        return buttons;\r\n    }\r\n\r\n    protected updateInterface() {\r\n        super.updateInterface();\r\n\r\n        this.toolbar.findButton(\"edit-permissions-button\").toggleClass(\"disabled\", this.isNewOrDeleted());\r\n    }\r\n\r\n    protected afterLoadEntity() {\r\n        super.afterLoadEntity();\r\n        // winauth additions:\r\n\r\n        if (this.form.Source.value.toLowerCase() == \"win\") {\r\n            // adapt some items for Win auth\r\n            // if available to  you: this.form.TwoFactorAuth.set_readOnly(true);\r\n            EditorUtils.setReadOnly(this.form.Username, true);\r\n\r\n            this.form.Password.getGridField().hide();\r\n            this.form.PasswordConfirm.getGridField().hide();\r\n\r\n        }\r\n        else {\r\n\r\n            // these fields are only required in new record mode\r\n            this.form.Password.element.toggleClass('required', this.isNew())\r\n                .closest('.field').find('sup').toggle(this.isNew());\r\n            this.form.PasswordConfirm.element.toggleClass('required', this.isNew())\r\n                .closest('.field').find('sup').toggle(this.isNew());\r\n        }\r\n    }\r\n\r\n    // winauth new method:\r\n\r\n    protected refreshUserData() {\r\n\r\n        if (this.entity.Username.indexOf(\"\\\\\") > 1) {\r\n            var msg = \"The user's cached site details have been removed. The user's roles have also been re-queried from Windows (you may not see the results until you refresh this screen).\";\r\n            var msg2 = \"\\n\\nIf this user had other roles manually assigned, the additional roles will have been removed and you may need to re-assign some.\";\r\n            var msg3 = \"\\n\\nThe user may need to request a refresh via their Profile page, or log out and back in, to see an updated Dashboard in some cases.\";\r\n\r\n\r\n            confirmDialog(\"PRESERVE existing roles not corresponding\\nto Windows network groups\\nfor \" +\r\n                this.entity.Username + \" (answer 'Yes') ?\\n\\nAnswering 'No' will REMOVE roles that may have been manually assigned. \" +\r\n                \"\\n\\nUse the Close box to cancel.\", () =>\r\n                AdminRefreshUser(this.entityId, this.entity.Username, msg + msg3, false), {\r\n                onNo: () => AdminRefreshUser(this.entityId, this.entity.Username, msg + msg2 + msg3, true)\r\n            })\n            \r\n        }\r\n        else {\r\n            var msg = \"The user's cached site details have been removed.\";\r\n            var msg2 = \"\\n\\nThe user may need to request a refresh via their Profile page, or log out and back in, to see an updated Dashboard in some cases.\";\r\n\r\n            AdminRefreshUser(this.entityId, this.entity.Username, msg + msg2, false);\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["import_corelib", "import_corelib", "import_corelib", "_UserPermissionDialog", "opt", "PermissionCheckEditor", "UserPermissionService", "response", "__name", "UserPermissionDialog", "import_corelib", "UserDialog", "UserForm", "Texts", "UserRow", "UserService", "buttons", "UserPermissionDialog", "msg", "msg2", "msg3", "AdminRefreshUser", "__name", "__decorateClass", "UserGrid", "UserColumns", "UserDialog", "UserRow", "UserService", "container", "columns", "roles", "rolesLookup", "RoleRow", "lookup", "ctx", "roleList", "x", "e", "row", "cell", "item", "target", "userId", "userName", "msg", "msg2", "msg3", "AdminRefreshUser", "__name", "__decorateClass", "UserGrid"]
}
