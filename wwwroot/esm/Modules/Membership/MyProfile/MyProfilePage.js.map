{
  "version": 3,
  "sources": ["external-global:Serenity.Extensions", "../../../../../Modules/Membership/MyProfile/MyProfilePage.ts", "../../../../../Modules/Membership/MyProfile/MyProfileGrid.ts", "../../../../../Modules/Membership/MyProfile/MyProfileDialog.ts"],
  "sourcesContent": ["module.exports = Serenity.Extensions;", " import { initFullHeightGridPage } from '@serenity-is/corelib';\r\nimport { MyProfileGrid } from './MyProfileGrid';\r\n\r\n$(function() {\r\n    initFullHeightGridPage(new MyProfileGrid($('#GridDiv')).element);\r\n});\r\n", "import { Decorators, EntityGrid, ToolButton, indexOf} from '@serenity-is/corelib';\r\nimport { MyProfileColumns, MyProfileRow, MyProfileService } from '../../ServerTypes/Membership';\r\nimport { MyProfileDialog } from './MyProfileDialog';\r\nimport { RemoveCurrentUserCache } from '../../Administration/User/Authentication/AuthUtils';\r\nimport { UserPreferenceStorage } from \"@serenity-is/extensions\";\r\n\r\n@Decorators.registerClass('WinAuthSample.Membership.MyProfileGrid')\r\nexport class MyProfileGrid extends EntityGrid<MyProfileRow, any> {\r\n    protected getColumnsKey() { return MyProfileColumns.columnsKey; }\r\n    protected getDialogType() { return MyProfileDialog; }\r\n    protected getIdProperty() { return MyProfileRow.idProperty; }\r\n    protected getInsertPermission() { return MyProfileRow.insertPermission; }\r\n    protected getLocalTextPrefix() { return MyProfileRow.localTextPrefix; }\r\n    protected getService() { return MyProfileService.baseUrl; }\r\n\r\n    constructor(container: JQuery) {\r\n        super(container);\r\n    }\r\n\r\n    \r\n    protected getButtons(): ToolButton[] {\r\n\r\n       // var buttons  = super.getButtons();\r\n       //buttons.splice(indexOf(buttons, x => x.cssClass == \"add-button\"), 1);\r\n    \r\n        return null;\r\n    }\r\n\r\n    protected getColumns<MyProfileColumns>() {\r\n        var cols = super.getColumns();\r\n        cols.splice(1, 0, {\r\n            field: 'Edit Contents',\r\n            name: '',\r\n            format: ctx => `<a class=\"inline-action edit-details\" title=\"edit profile in form\">\r\n                    <i class=\"fa fa-edit\"></i></a>`,\r\n            width: 24,\r\n            minWidth: 24,\r\n            maxWidth: 24\r\n        });\r\n\r\n        cols.splice(1, 0, {\r\n            field: 'Refresh User Cache',\r\n            name: '',\r\n            format: ctx => `<a class=\"inline-action recycle-cache  text-green\" title=\"refresh user cache\">\r\n                    <i class=\"fa fa-recycle\"></i></a>`,\r\n            width: 24,\r\n            minWidth: 24,\r\n            maxWidth: 24\r\n        });\r\n        return cols;\r\n    }\r\n\r\n    protected onClick(e: JQueryEventObject, row: number, cell: number) {\r\n        super.onClick(e, row, cell);\r\n\r\n        if (e.isDefaultPrevented())\r\n            return;\r\n\r\n        var item = this.itemAt(row);\r\n        var target = $(e.target);\r\n\r\n        // if user clicks \"i\" element, e.g. icon\r\n        if (target.parent().hasClass('inline-action'))\r\n            target = target.parent();\r\n\r\n        if (target.hasClass('inline-action')) {\r\n            e.preventDefault();\r\n            if (target.hasClass('edit-details')) {\r\n                var dlg = new MyProfileDialog();\r\n                dlg.loadByIdAndOpenDialog(item.UserId);\r\n                this.initDialog(dlg);\r\n\r\n            }\r\n            else if (target.hasClass('recycle-cache')) {\r\n                var msg = \"Your cached details have been removed.\\n\\n\" +\r\n                    ((item.Username.indexOf(\"\\\\\") > 1) ? \"If you have recently become a member of a relevant Windows network group,\\nadditional application roles may have been added.\\n\\n\" : \"\") +\r\n                \"Try going back to the Dashboard page by clicking on it in the menu. \\nIf still needed, refresh your browser with Ctrl-F5.\\n\\n\" +\r\n                    \"If that doesn't work, using one of the\\nLogout methods, then logging back in, and then \\nre-refreshing the browser should do it.\"\r\n\r\n                // note: the \"YES\" value is currently being ignored, we treat the existance of the row for a user as a flag.\r\n                // This preference can be set anywhere in the application where you think a change is happening that should\r\n                // immediately cause a refresh of the Dashboard for this particular user.  Typically this won't matter to\r\n                // anything but user-specific details, and those would be specific to a given application, so the usage in\r\n                // the Dashboard for this sample app is illustrative, but it seems reasonable to set the flag when the user's\r\n                // standard cached details -- whatever they are -- are requested to be refreshed.\r\n                new UserPreferenceStorage().setItem(\"DashboardNeedsRefresh\", \"YES\");\r\n\r\n                RemoveCurrentUserCache(item.UserId, item.Username, msg, true);\r\n                \r\n            }\r\n       \r\n           \r\n\r\n            ;\r\n        }\r\n    }\r\n\r\n}", "import { Decorators, EntityDialog, ToolButton, resolveUrl } from '@serenity-is/corelib';\r\nimport { MyProfileForm, MyProfileRow, MyProfileService } from '../../ServerTypes/Membership';\r\nimport { RemoveCurrentUserCache } from '../../Administration/User/Authentication/AuthUtils';\r\nimport { UserPreferenceStorage } from \"@serenity-is/extensions\";\r\n\r\n \r\n\r\n@Decorators.registerClass('WinAuthSample.Membership.MyProfileDialog')\r\n    @Decorators.registerEditor('WinAuthSample.Membership.MyProfileDialog')\r\n @Decorators.panel()\r\nexport class MyProfileDialog extends EntityDialog<MyProfileRow, any> {\r\n    protected getFormKey() { return MyProfileForm.formKey; }\r\n    protected getIdProperty() { return MyProfileRow.idProperty; }\r\n    protected getLocalTextPrefix() { return MyProfileRow.localTextPrefix; }\r\n    protected getNameProperty() { return MyProfileRow.nameProperty; }\r\n    protected getService() { return MyProfileService.baseUrl; }\r\n    protected getDeletePermission() { return MyProfileRow.deletePermission; }\r\n    protected getInsertPermission() { return MyProfileRow.insertPermission; }\r\n    protected getUpdatePermission() { return MyProfileRow.updatePermission; }\r\n\r\n    protected form = new MyProfileForm(this.idPrefix);\r\n    protected archivePrivs: boolean = false;\r\n    protected archiving: boolean = false;\r\n \r\n\r\n    \r\n    protected updateInterface(): void {\r\n \r\n        super.updateInterface();\r\n        this.toolbar.findButton('delete-button').hide();\r\n      \r\n        \r\n     \r\n    }\r\n\r\n    protected getToolbarButtons(): ToolButton[] {\r\n        var buttons = super.getToolbarButtons();\r\n        let newBtn = this.createToolButtonRecycle();\r\n        buttons.push(newBtn);\r\n        \r\n    return buttons;\r\n    }\r\n\r\n   \r\n\r\n    \r\n   \r\n    protected createToolButtonRecycle() {\r\n        return <ToolButton>{\r\n            separator: true,\r\n            title: 'Refresh\u2026',\r\n            icon: 'fa-recycle text-green',\r\n            onClick: () => {\r\n                this.doUserRefresh();\r\n            }\r\n        };\r\n    }\r\n\r\n    protected doUserRefresh() {\r\n\r\n        // TBD -- can we check to see if the current identity is the same as the form identity.  \r\n        //If not, we are impersonating and can make a decision about\r\n        // whether or not we want to remove other roles besides those that are allowed by role.\r\n        // Ask the (admin) user whether they want to do this and pass along the information.\r\n        // (Right now that param of the procedure isn't even exposed, because it won't make \r\n        // sense to use it unless we are able to determine whether the current user is impersonating)\r\n        \r\n\r\n        var msg = \"Your cached details have been removed.\\n\\n\" +\r\n            ((this.form.Username.value.indexOf(\"\\\\\") > 1) ? \"If you have recently become a member of a relevant Windows network group,\\nadditional application roles may have been added.\\n\\n\" : \"\") +\r\n            \"Try going back to the Dashboard page by clicking on it in the menu. \\nIf still needed, refresh your browser with Ctrl-F5.\\n\\n\" +\r\n            \"If that doesn't work, using one of the\\nLogout methods, then logging back in, and then \\nre-refreshing the browser should do it.\";\r\n\r\n        // note: the \"YES\" value is currently being ignored, we treat the existance of the row for a user as a flag.\r\n        // This preference can be set anywhere in the application where you think a change is happening that should\r\n        // immediately cause a refresh of the Dashboard for this particular user.  Typically this won't matter to\r\n        // anything but user-specific details, and those would be specific to a given application, so the usage in\r\n        // the Dashboard for this sample app is illustrative, but it seems reasonable to set the flag when the user's\r\n        // standard cached details -- whatever they are -- are requested to be refreshed.\r\n        new UserPreferenceStorage().setItem(\"DashboardNeedsRefresh\", \"YES\");\r\n\r\n        RemoveCurrentUserCache(this.entityId, this.form.Username.value, msg, true);\r\n        \r\n    }\r\n    protected onDialogClose() {\r\n        super.onDialogClose();\r\n        window.location.href= resolveUrl(\"~/\");\r\n    }\r\n}"],
  "mappings": "iNAAA,IAAAA,EAAAC,EAAA,CAAAC,EAAAC,IAAA,CAAAA,EAAO,QAAU,SAAS,aCAzB,IAAAC,EAAuC,SCAxC,IAAAC,EAA2D,SCA3D,IAAAC,EAAiE,SAGjE,IAAAC,EAAsC,SAO/B,IAAMC,EAAN,cAA8B,cAAgC,CAA9D,kCAUH,KAAU,KAAO,IAAIC,EAAc,KAAK,QAAQ,EAChD,KAAU,aAAwB,GAClC,KAAU,UAAqB,GAXrB,YAAa,CAAE,OAAOA,EAAc,OAAS,CAC7C,eAAgB,CAAE,OAAOC,EAAa,UAAY,CAClD,oBAAqB,CAAE,OAAOA,EAAa,eAAiB,CAC5D,iBAAkB,CAAE,OAAOA,EAAa,YAAc,CACtD,YAAa,CAAE,OAAOC,EAAiB,OAAS,CAChD,qBAAsB,CAAE,OAAOD,EAAa,gBAAkB,CAC9D,qBAAsB,CAAE,OAAOA,EAAa,gBAAkB,CAC9D,qBAAsB,CAAE,OAAOA,EAAa,gBAAkB,CAQ9D,iBAAwB,CAE9B,MAAM,gBAAgB,EACtB,KAAK,QAAQ,WAAW,eAAe,EAAE,KAAK,CAIlD,CAEU,mBAAkC,CACxC,IAAIE,EAAU,MAAM,kBAAkB,EACtC,IAAIC,EAAS,KAAK,wBAAwB,EAC1C,OAAAD,EAAQ,KAAKC,CAAM,EAEhBD,CACP,CAMU,yBAA0B,CAChC,MAAmB,CACf,UAAW,GACX,MAAO,gBACP,KAAM,wBACN,QAAS,IAAM,CACX,KAAK,cAAc,CACvB,CACJ,CACJ,CAEU,eAAgB,CAUtB,IAAIE,EAAM;AAAA;AAAA,GACJ,KAAK,KAAK,SAAS,MAAM,QAAQ,IAAI,EAAI,EAAK;AAAA;AAAA;AAAA,EAAqI,IACrL;AAAA;AAAA;AAAA;AAAA;AAAA,yCASJ,IAAI,wBAAsB,EAAE,QAAQ,wBAAyB,KAAK,EAElEC,EAAuB,KAAK,SAAU,KAAK,KAAK,SAAS,MAAOD,EAAK,EAAI,CAE7E,CACU,eAAgB,CACtB,MAAM,cAAc,EACpB,OAAO,SAAS,QAAM,cAAW,IAAI,CACzC,CACJ,EA9EqEE,EAAAR,EAAA,mBAAxDA,EAANS,EAAA,CAHN,aAAW,cAAc,0CAA0C,EAC/D,aAAW,eAAe,0CAA0C,EACvE,aAAW,MAAM,GACNT,GDNb,IAAAU,EAAsC,SAG/B,IAAMC,EAAN,cAA4B,YAA8B,CACnD,eAAgB,CAAE,OAAOC,EAAiB,UAAY,CACtD,eAAgB,CAAE,OAAOC,CAAiB,CAC1C,eAAgB,CAAE,OAAOC,EAAa,UAAY,CAClD,qBAAsB,CAAE,OAAOA,EAAa,gBAAkB,CAC9D,oBAAqB,CAAE,OAAOA,EAAa,eAAiB,CAC5D,YAAa,CAAE,OAAOC,EAAiB,OAAS,CAE1D,YAAYC,EAAmB,CAC3B,MAAMA,CAAS,CACnB,CAGU,YAA2B,CAKjC,OAAO,IACX,CAEU,YAA+B,CACrC,IAAIC,EAAO,MAAM,WAAW,EAC5B,OAAAA,EAAK,OAAO,EAAG,EAAG,CACd,MAAO,gBACP,KAAM,GACN,OAAQC,GAAO;AAAA,oDAEf,MAAO,GACP,SAAU,GACV,SAAU,EACd,CAAC,EAEDD,EAAK,OAAO,EAAG,EAAG,CACd,MAAO,qBACP,KAAM,GACN,OAAQC,GAAO;AAAA,uDAEf,MAAO,GACP,SAAU,GACV,SAAU,EACd,CAAC,EACMD,CACX,CAEU,QAAQ,EAAsBE,EAAaC,EAAc,CAG/D,GAFA,MAAM,QAAQ,EAAGD,EAAKC,CAAI,EAEtB,GAAE,mBAAmB,EAGzB,KAAIC,EAAO,KAAK,OAAOF,CAAG,EACtBG,EAAS,EAAE,EAAE,MAAM,EAMvB,GAHIA,EAAO,OAAO,EAAE,SAAS,eAAe,IACxCA,EAASA,EAAO,OAAO,GAEvBA,EAAO,SAAS,eAAe,GAE/B,GADA,EAAE,eAAe,EACbA,EAAO,SAAS,cAAc,EAAG,CACjC,IAAIC,EAAM,IAAIV,EACdU,EAAI,sBAAsBF,EAAK,MAAM,EACrC,KAAK,WAAWE,CAAG,CAEvB,SACSD,EAAO,SAAS,eAAe,EAAG,CACvC,IAAIE,EAAM;AAAA;AAAA,GACJH,EAAK,SAAS,QAAQ,IAAI,EAAI,EAAK;AAAA;AAAA;AAAA,EAAqI,IAC9K;AAAA;AAAA;AAAA;AAAA;AAAA,yCASA,IAAI,wBAAsB,EAAE,QAAQ,wBAAyB,KAAK,EAElEI,EAAuBJ,EAAK,OAAQA,EAAK,SAAUG,EAAK,EAAI,CAEhE,GAMR,CAEJ,EA1FiEE,EAAAf,EAAA,iBAApDA,EAANgB,EAAA,CADN,aAAW,cAAc,wCAAwC,GACrDhB,GDJb,EAAE,UAAW,IACT,0BAAuB,IAAIiB,EAAc,EAAE,UAAU,CAAC,EAAE,OAAO,CACnE,CAAC",
  "names": ["require_Serenity", "__commonJSMin", "exports", "module", "import_corelib", "import_corelib", "import_corelib", "import_extensions", "MyProfileDialog", "MyProfileForm", "MyProfileRow", "MyProfileService", "buttons", "newBtn", "msg", "RemoveCurrentUserCache", "__name", "__decorateClass", "import_extensions", "MyProfileGrid", "MyProfileColumns", "MyProfileDialog", "MyProfileRow", "MyProfileService", "container", "cols", "ctx", "row", "cell", "item", "target", "dlg", "msg", "RemoveCurrentUserCache", "__name", "__decorateClass", "MyProfileGrid"]
}
