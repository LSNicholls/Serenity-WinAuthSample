{
  "version": 3,
  "sources": ["../../../Modules/ServerTypes/Membership/LoginForm.ts", "../../../Modules/ServerTypes/Membership/SignUpForm.ts", "../../../Modules/ServerTypes/Membership/MyProfileColumns.ts", "../../../Modules/ServerTypes/Membership/MyProfileForm.ts", "../../../Modules/ServerTypes/Membership/MyProfileRow.ts", "../../../Modules/ServerTypes/Membership/MyProfileService.ts"],
  "sourcesContent": ["\uFEFFimport { StringEditor, PasswordEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\r\n\r\nexport interface LoginForm {\r\n    Username: StringEditor;\r\n    Password: PasswordEditor;\r\n}\r\n\r\nexport class LoginForm extends PrefixedContext {\r\n    static readonly formKey = 'Membership.Login';\r\n    private static init: boolean;\r\n\r\n    constructor(prefix: string) {\r\n        super(prefix);\r\n\r\n        if (!LoginForm.init)  {\r\n            LoginForm.init = true;\r\n\r\n            var w0 = StringEditor;\r\n            var w1 = PasswordEditor;\r\n\r\n            initFormType(LoginForm, [\r\n                'Username', w0,\r\n                'Password', w1\r\n            ]);\r\n        }\r\n    }\r\n}", "\uFEFFimport { StringEditor, EmailAddressEditor, PasswordEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\r\n\r\nexport interface SignUpForm {\r\n    DisplayName: StringEditor;\r\n    Email: EmailAddressEditor;\r\n    ConfirmEmail: EmailAddressEditor;\r\n    Password: PasswordEditor;\r\n    ConfirmPassword: PasswordEditor;\r\n}\r\n\r\nexport class SignUpForm extends PrefixedContext {\r\n    static readonly formKey = 'Membership.SignUp';\r\n    private static init: boolean;\r\n\r\n    constructor(prefix: string) {\r\n        super(prefix);\r\n\r\n        if (!SignUpForm.init)  {\r\n            SignUpForm.init = true;\r\n\r\n            var w0 = StringEditor;\r\n            var w1 = EmailAddressEditor;\r\n            var w2 = PasswordEditor;\r\n\r\n            initFormType(SignUpForm, [\r\n                'DisplayName', w0,\r\n                'Email', w1,\r\n                'ConfirmEmail', w1,\r\n                'Password', w2,\r\n                'ConfirmPassword', w2\r\n            ]);\r\n        }\r\n    }\r\n}", "\uFEFFimport { ColumnsBase, fieldsProxy } from \"@serenity-is/corelib\";\r\nimport { Column } from \"@serenity-is/sleekgrid\";\r\nimport { MyProfileRow } from \"./MyProfileRow\";\r\n\r\nexport interface MyProfileColumns {\r\n    UserId: Column<MyProfileRow>;\r\n    Username: Column<MyProfileRow>;\r\n    DisplayName: Column<MyProfileRow>;\r\n    FormInitials: Column<MyProfileRow>;\r\n    Email: Column<MyProfileRow>;\r\n    UserImage: Column<MyProfileRow>;\r\n}\r\n\r\nexport class MyProfileColumns extends ColumnsBase<MyProfileRow> {\r\n    static readonly columnsKey = 'Membership.MyProfile';\r\n    static readonly Fields = fieldsProxy<MyProfileColumns>();\r\n}", "\uFEFFimport { StringEditor, EmailAddressEditor, ImageUploadEditor, PrefixedContext, initFormType } from \"@serenity-is/corelib\";\r\n\r\nexport interface MyProfileForm {\r\n    DisplayName: StringEditor;\r\n    FormInitials: StringEditor;\r\n    Email: EmailAddressEditor;\r\n    UserImage: ImageUploadEditor;\r\n    Username: StringEditor;\r\n}\r\n\r\nexport class MyProfileForm extends PrefixedContext {\r\n    static readonly formKey = 'Membership.MyProfile';\r\n    private static init: boolean;\r\n\r\n    constructor(prefix: string) {\r\n        super(prefix);\r\n\r\n        if (!MyProfileForm.init)  {\r\n            MyProfileForm.init = true;\r\n\r\n            var w0 = StringEditor;\r\n            var w1 = EmailAddressEditor;\r\n            var w2 = ImageUploadEditor;\r\n\r\n            initFormType(MyProfileForm, [\r\n                'DisplayName', w0,\r\n                'FormInitials', w0,\r\n                'Email', w1,\r\n                'UserImage', w2,\r\n                'Username', w0\r\n            ]);\r\n        }\r\n    }\r\n}", "\uFEFFimport { fieldsProxy } from \"@serenity-is/corelib\";\r\n\r\nexport interface MyProfileRow {\r\n    UserId?: number;\r\n    Username?: string;\r\n    DisplayName?: string;\r\n    Email?: string;\r\n    FormInitials?: string;\r\n    UserImage?: string;\r\n}\r\n\r\nexport abstract class MyProfileRow {\r\n    static readonly idProperty = 'UserId';\r\n    static readonly nameProperty = 'Username';\r\n    static readonly localTextPrefix = 'Membership.MyProfile';\r\n    static readonly deletePermission = 'None';\r\n    static readonly insertPermission = 'None';\r\n    static readonly readPermission = '*';\r\n    static readonly updatePermission = '*';\r\n\r\n    static readonly Fields = fieldsProxy<MyProfileRow>();\r\n}", "\uFEFFimport { SaveRequest, SaveResponse, ServiceOptions, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse, serviceRequest } from \"@serenity-is/corelib\";\r\nimport { MyProfileRow } from \"./MyProfileRow\";\r\n\r\nexport namespace MyProfileService {\r\n    export const baseUrl = 'Membership/MyProfile';\r\n\r\n    export declare function Create(request: SaveRequest<MyProfileRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function Update(request: SaveRequest<MyProfileRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<MyProfileRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<MyProfileRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\r\n\r\n    export const Methods = {\r\n        Create: \"Membership/MyProfile/Create\",\r\n        Update: \"Membership/MyProfile/Update\",\r\n        Retrieve: \"Membership/MyProfile/Retrieve\",\r\n        List: \"Membership/MyProfile/List\"\r\n    } as const;\r\n\r\n    [\r\n        'Create', \r\n        'Update', \r\n        'Retrieve', \r\n        'List'\r\n    ].forEach(x => {\r\n        (<any>MyProfileService)[x] = function (r, s, o) {\r\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\r\n        };\r\n    });\r\n}"],
  "mappings": "sDAAC,IAAAA,EAA4E,SAOtE,IAAMC,EAAN,MAAMA,UAAkB,iBAAgB,CAI3C,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAU,KAAO,CAClBA,EAAU,KAAO,GAEjB,IAAIE,EAAK,eACLC,EAAK,oBAET,gBAAaH,EAAW,CACpB,WAAYE,EACZ,WAAYC,CAChB,CAAC,CACL,CACJ,CACJ,EAnB+CC,EAAAJ,EAAA,aAAlCA,EACO,QAAU,mBADvB,IAAMK,EAANL,ECPN,IAAAM,EAAgG,SAU1F,IAAMC,EAAN,MAAMA,UAAmB,iBAAgB,CAI5C,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAW,KAAO,CACnBA,EAAW,KAAO,GAElB,IAAIE,EAAK,eACLC,EAAK,qBACLC,EAAK,oBAET,gBAAaJ,EAAY,CACrB,cAAeE,EACf,QAASC,EACT,eAAgBA,EAChB,WAAYC,EACZ,kBAAmBA,CACvB,CAAC,CACL,CACJ,CACJ,EAvBgDC,EAAAL,EAAA,cAAnCA,EACO,QAAU,oBADvB,IAAMM,EAANN,ECVN,IAAAO,EAAyC,SAanC,IAAMC,EAAN,MAAMA,UAAyB,aAA0B,CAGhE,EAHgEC,EAAAD,EAAA,oBAAnDA,EACO,WAAa,uBADpBA,EAEO,UAAS,eAA8B,EAFpD,IAAME,EAANF,ECbN,IAAAG,EAAmG,SAU7F,IAAMC,EAAN,MAAMA,UAAsB,iBAAgB,CAI/C,YAAYC,EAAgB,CAGxB,GAFA,MAAMA,CAAM,EAER,CAACD,EAAc,KAAO,CACtBA,EAAc,KAAO,GAErB,IAAIE,EAAK,eACLC,EAAK,qBACLC,EAAK,uBAET,gBAAaJ,EAAe,CACxB,cAAeE,EACf,eAAgBA,EAChB,QAASC,EACT,YAAaC,EACb,WAAYF,CAChB,CAAC,CACL,CACJ,CACJ,EAvBmDG,EAAAL,EAAA,iBAAtCA,EACO,QAAU,uBADvB,IAAMM,EAANN,ECVN,IAAAO,EAA4B,SAWtB,IAAeC,EAAf,MAAeA,CAAa,CAUnC,EAVmCC,EAAAD,EAAA,gBAAbA,EACF,WAAa,SADXA,EAEF,aAAe,WAFbA,EAGF,gBAAkB,uBAHhBA,EAIF,iBAAmB,OAJjBA,EAKF,iBAAmB,OALjBA,EAMF,eAAiB,IANfA,EAOF,iBAAmB,IAPjBA,EASF,UAAS,eAA0B,EAThD,IAAeE,EAAfF,ECXN,IAAAG,EAAwI,SAGxHC,OACAA,EAAA,QAAU,uBAOVA,EAAA,QAAU,CACnB,OAAQ,8BACR,OAAQ,8BACR,SAAU,gCACV,KAAM,2BACV,EAEA,CACI,SACA,SACA,WACA,MACJ,EAAE,QAAQC,GAAK,CACLD,EAAkBC,CAAC,EAAI,SAAUC,EAAGC,EAAGC,EAAG,CAC5C,SAAO,kBAAeJ,EAAA,QAAU,IAAMC,EAAGC,EAAGC,EAAGC,CAAC,CACpD,CACJ,CAAC,IAxBYJ,MAAA",
  "names": ["import_corelib", "_LoginForm", "prefix", "w0", "w1", "__name", "LoginForm", "import_corelib", "_SignUpForm", "prefix", "w0", "w1", "w2", "__name", "SignUpForm", "import_corelib", "_MyProfileColumns", "__name", "MyProfileColumns", "import_corelib", "_MyProfileForm", "prefix", "w0", "w1", "w2", "__name", "MyProfileForm", "import_corelib", "_MyProfileRow", "__name", "MyProfileRow", "import_corelib", "MyProfileService", "x", "r", "s", "o"]
}
